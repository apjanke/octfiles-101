Oct-Files 101
=============
Andrew Janke <floss@apjanke.net>
:Author Initials: APJ
:toc:
:toclevels: 4
:numbered:
:website: https://github.com/apjanke/octfiles-101

== Introduction ==

This guide is a gentle introduction to writing oct-files for GNU Octave.
It assumes you know Octave M-code and have a passing familiarity with C++.
No prior oct-file experience is assumed.

Oct-files are Octave extensions written in C\++ that make use of the same Octave internal API that Octave itself is written in.
(I'm not sure what that API is called.)
That API is in C++ and makes use of templates and inheritance, so it can be difficult to muddle through.

I wrote this guide because I needed to write a few oct-files and couldn't find a good introductory tutorial, and I wanted others to have an easier time of it than I did.
The Octave manual's https://octave.org/doc/v4.4.1/Oct_002dFiles.html[Oct-Files appendix] covers the oct-file interface and aspects of coding unique to it, but seems to presume a familiarity with the internal Octave API.
I lacked that familiarity.
This guide intends to step in for the beginner who also doesn't know the internal Octave API, but wants to get a quick start being productive with oct-files.

You can read this guide online at https://apjanke.github.io/octfiles-101. You can find its source code at https://github.com/apjanke/octfiles-101.

Please note: I am myself an oct-file novice.
I'm writing this document as I learn.
Please forgive any mistakes.
Or better yet, file an https://github.com/apjanke/octfiles-101/issues[Issue] and let me know what I did wrong.
You can also contact me at <floss@apjanke.net>.

This guide was written and tested with Octave 4.4, primarily on macOS, but it should apply to other versions and OSes as well.

This is a work in progress, and its structure is in flux.
Links to particular sections are likely to break in the future.

=== Terminology ===

This document uses the following terms, which may or may not be offical Octave-speak:

[glossary]
M function::
  An Octave function defined in M-code. These are the regular Octave functions you're used to writing.
oct function::
  An Octave function defined by an oct-file. This is written in C++.

=== Setup ===

The Octave internal API isn't heavily documented, so you're probably going to end up digging around in its header files for type definitions.
This is a _lot_ easier when using an IDE that can follow identifier references for you.

This project uses https://www.jetbrains.com/clion/[CLion].
If you want to “play along” and see all the example files in CLion, just clone the https://github.com/apjanke/octfiles-101[repo] and open it as a CLion project.

There's no free “community” edition of CLion, so if you don't have a license, you'll need to pick a different C\++ IDE.
I'm not very experienced with C++ IDEs, so I can't recommend one.
Anything that is CMake-aware will probably (maybe) work.

== The Very Basics ==

=== Hello, World ===

Here's the coding classic “Hello, World” written as an oct-file:

---------------------------------------
include::src/ex01_hello_world.cc[]
---------------------------------------

This is the equivalent of the following M function:

---------------------------------------
function ex01_hello_world ()
  % My 'Hello, world!' function
  fprintf ("Hello, world!\n");
endfunction
---------------------------------------

Let's break this down.

---------------------------------------
#include <iostream>
#include <octave/oct.h>
---------------------------------------

These `#includes` are C preprocessor statements that pull in "header" files, giving you access to the definitions of C/C\++ functions and types.
`#include <iostream>` pulls in the standard C++ I/O routines.
`#include <octave/oct.h>` pulls in Octave's oct-file API, which also includes the Octave internal API.
Just put these in every oct-file.

---------------------------------------
DEFUN_DLD (ex01_hello_world, args, nargout,
  "'Hello, world!' as an oct-file")
---------------------------------------

The `DEFUN_DLD (...)` macro defines the entry point to your oct-file.
This introduces the C++ function that will be presented as the Octave function for this oct-file.

The first argument (`ex01_hello_world`) is the name of the Octave function you're defining.
It should be the same name as the file, minus its `.cc` extension.

The next two arguments, `args` and `nargout`, give your function access to how it was called from Octave M-code.
Leave them exactly as is.

The fourth argument is the helptext string for your function.
You can extend it across multiple lines by putting multiple double-quoted strings in a row on subsequent lines, with no commas between them, before the closing “`)`”.
(C++ concatenates mulstiple strings like this into a single string.)
Put a `\n` newline at the end of each string in a multi-line help string.

For example:

---------------------------------------
DEFUN_DLD (ex01_hello_world, args, nargout,
  "'Hello, world!' as an oct-file\n"
  "\n"
  "This is another line of helptext.\n"
  "And another.")
---------------------------------------


The code between the `{...}` braces is the body of your main oct-file function.

---------------------------------------
  octave_stdout << "Hello, world!" << std::endl;
---------------------------------------

This displays output to the Octave command window.
In oct-files, you use `octave_stdout` instead of `std::out`.
The `std::endl` adds a newline and flushes the output.

---------------------------------------
  return octave_value_list ();
---------------------------------------

Your C\++ oct-file main function always has to return something, even if at the Octave level the function has no argouts.
Return values from an oct-file are encapsulated in an `octave_value_list` object, which is the C++ equivalent of a comma-separated list in M-code.
`octave_value_list ()` with no arguments constructs an empty list, which is equivalent to an M-code function that returns zero argouts.

=== Creating Some Arrays ===

Let's create some array values.

Octave arrays are represented by a https://octave.org/doc/v4.0.1/Matrices-and-Arrays-in-Oct_002dFiles.html[whole slew of C\++ types] in the Octave API.
In M-code, these are all just held in untyped variables, but in C++, different kinds of arrays are differentiated by static types.

Here are the basic ones:

[frame="topbot",options="header"]
|========================================
| C++ Type | Meaning | M-code Equivalent
| `octave_value` | A single Octave array | Any variable
| `octave_value_list` | A list of Octave arrays | A comma-separated list
| `Array` | An N-dimensional array of any type | Any variable
| `MArray` | An N-dimensional array that has math operations | Any numeric array
| `Matrix` | A 2-dimensional `double` array | `double`
| `NDArray` | An N-dimensional `double` array | `double` (non-complex)
| `charMatrix` | A 2-dimensional character array | `char`
| `octave_map` | An array of name/value maps | `struct`
|========================================

_(TODO: Find out which, if any, of these are `abstract` types and note that.)_

_(TODO: Find out the difference between an `Array` and an `octave_value`.)_

Consider this M function:

---------------------------------------
function out = ex02_scalar_numerics
  x = 42;
  y = NaN;
  out = x + y;
endfunction
---------------------------------------

Here's the oct-file equivalent:

---------------------------------------
include::src/ex02_scalar_numerics.cc[]
---------------------------------------

Let's break down the new stuff:

`#include <cmath>` pulls in the C math header.
You need this to get access to the `NAN` constant.

---------------------------------------
  Matrix x (1, 1, 42.0);
  Matrix y (1, 1, NAN);
---------------------------------------

This creates a scalar `double` array containing the value 42.0.
The constructor `Matrix (r, c, x)` constructs an __r__-by-__c__ 2-dimensional matrix with its element values initialized to __x__.

The following alternatives are _wrong_.
You might think you could do them, and they will even compile and create arrays, but their values will be incorrect!

---------------------------------------
  // WRONG: Produces incorrect values
  NDArray x (42.3);
  NDArray y (NAN);
---------------------------------------

The issue here is that there is no exact constructor defined for `NDArray (double)`.
Instead, the inputs get silently coerced to _characters_, and then they're converted back to doubles.
This causes numbers outside the range of 0-255 and NaN/Inf values to be silently converted to 0, and numbers with fractional parts to be rounded down to the nearest integer.

So avoid the single-argument `NDArray` constructor unless you really know what you're doing with it.

A correct alternative is the following:

---------------------------------------
  NDArray x ({1, 1}, 123.456);     // create scalar
  NDArray y ({1, 2, 3}, 999.999);  // create 1-by-2-by-3 array
---------------------------------------

An `NDArray` is an n-dimensional Octave `double` array. `NDArray <name> (<dim_vec>, <x>)`, where `<dim_vec>` is a `dim_vector` object and `<x>` is a C++ `double` value, creates an Octave `double` array of the given dimensions and initializes its elements with the value you pass in.
`dim_vector` defines a construct that takes a list of ints as its inputs, so you can use the `{...}` “initializer list” syntax in place of it.

In Octave, every numeric literal is a `double`, whether you write it as `42` or `42.0`.
In C++, they're distinct types: `42` is an `int`, and `42.0` is a `double`.
But because you're making a `Matrix` or `NDArray`, whatever you pass in gets converted to a double.
`Matrix` and `NDArray` know their element data type, and that type is always `double`.

---------------------------------------
  return octave_value (x + y);
---------------------------------------

You can do math with C++ Octave array types using `+`, `-`, and other arithmetic operators, similar to how you can in M-code.

You can't return an `NDArray` directly from your oct function.
That will give you a C++ compilation error.
You need to explicitly convert it to an `octave_value`.
(I don't know why.
Probably because there's not a constructor of the right form defined.)
But you can omit the `octave_value_list (...)` around your `octave_value (...)` – there is an automatic conversion from `octave_value` to an `octave_value_list`.


=== Inputs and Error Checking ===

To do useful work, we need to accept input arguments from our caller.

---------------------------------------
include::src/ex03_inputs_and_error_checking.cc[]
---------------------------------------

This is basically the equivalent of the M function:

---------------------------------------
function [a, b] = ex03_inputs_and_error_checking (x, y)
  narginchk (2, 2);
  a = y;
  b = x;
endfunction
---------------------------------------

Let's break it down:

---------------------------------------
  octave_idx_type nargin = args.length ();
---------------------------------------

`octave_idx_type` is the type used to index into Octave arrays or represent their size.
It's like `size_t`.
(In fact, it probably is a `size_t`.)

---------------------------------------
  error ("Need exactly 2 argins, got %ld", (long) nargin);
---------------------------------------

Calling `error()` in an oct-file behaves the same as calling `error()` in M-code: it aborts execution of the function, returning control to the interactive prompt, or an enclosing M-code `try`/`catch` block.
You can pass multiple arguments to `error()`, in which case the first argument is a `printf`-style format string, and the remaining arguments are values to substitue into the format string's placeholders.
This is a good thing to make use of, because it lets you include information about the actual data values that caused a problem, making it easier to debug.

You need to use `%ld` instead of `%d` to print out `octave_idx_type` values, because they're typically 64 bits instead of 32 bits.
And you need to explicitly cast them to `(long)` for compatibility with Octaves that are compiled in 32-bit mode.

The values passed in to `error()` need to be basic C++ types like `char *`, `int`, or `double`, not Octave API objects like `NDArray` or `Matrix`.

Note that if you pass strings in to `error()`, they must be C-style strings (`char *`) and not C++ `std::string` objects.
Any `std::string` needs to be converted to a `char *` by calling `c_str()` on it.

As in M-code, `warning()` works the same way as `error()`, accepting `printf`-style arguments.

If you want to include an error or warning identifier, you can't just include the ID as an extra first argument like in M-code. You need to call the `error_with_id` or `warning_with_id` variants instead.

---------------------------------------
  std::string some_string ("foobar");
  error ("Uh oh. Message: %s", some_string.c_str ());
---------------------------------------

The oct function's inputs are passed in as `octave_value` types in an `octave_value_list`.
You use `array_value()` and related conversion functions to convert them into the more specific subtypes like `NDArray` which support arithmetic, typed value access, and other functionality.

---------------------------------------
  NDArray x = args(0).array_value ();
---------------------------------------


The oct function's outputs are always returned as an `octave_value_list`, which corresponds to a comma-separated list in M-code.

---------------------------------------
  return ovl (y, x);
---------------------------------------

The `ovl()` function is a convenience function that is basically shorthand for calling the `octave_value_list (...)` constructor with the same input arguments, plus it supplies some additional conversion behavior. So `ovy (y, x)` is effectively shorthand for the following:

---------------------------------------
  octave_value_list varargout;
  varargout(0) = y;
  varargout(1) = x;
  return varargout;
---------------------------------------

You can assign into an `octave_value_list` using `()`-indexing, like you can with an `Array`, but the right-hand-side values must themselves be ++octave_value++s or compatible types.

You can't just say `return octave_value_list (y, x)` when `y` and `x` are ++NDArray++s.
I don't know why.

See https://octave.org/doc/v4.0.1/Input-Parameter-Checking-in-Oct_002dFiles.html[Input Parameter Checking in Oct-Files] for more details.

==== Building Error Messages using +std::string+ ====

Instead of using printf-style formatting using `%` placeholders, you can construct error message strings using `std::string` concatenation.
This can be more concise, especially when working with `octave_idx_type` values or templated types. Just don't forget to call `c_str()` on it.

---------------------------------------
  octave_idx_type nargin = args.length ();
  [...]
  std::string msg = std::string ("Expected 2 inputs, got " + nargin);
  error (msg.c_str ());
---------------------------------------

Note: I'm having trouble getting this to work with other types. I often get compiler errors saying stuff like `no viable conversion from 'octave_value' to 'std::string'` even when the inputs don't look like they're ++octave_value++s.

=== Basic Arithmetic ===

You can do array math with `NDArray` and related classes similar to how you do it in M-code.

---------------------------------------
include::src/ex04_basic_arithmetic.cc[]
---------------------------------------

Let's break it down.

---------------------------------------
  NDArray my_sum = x + y;
  NDArray my_difference = x - y;
  // Must use product(), not x * y, for NDArrays
  NDArray my_product = product (x, y);
---------------------------------------

The `NDArray` class defines arithmetic operators like `+`, `-`, and so on. `*` is not defined for `NDArray`, though; you have to use `product()` instead.

See http://wiki.octave.org/Tips_and_tricks#C.2B.2B[Tips and Tricks on the Octave wiki] for a table of C++ operations that correspond to common M-code arithmetic operations.

_Next step: look at some oct-files in Octave Forge packages to find examples._

=== Array Sizes and Indexing ===

In M-code, you just use doubles to represent array sizes and indexes. In C++, there's a few types used for this.

[frame="topbot",options="header"]
|========================================
| C++ Type | Meaning
| `octave_idx_type` | Array index, subscript, or size element
| `dim_vector` | Array size (dimensions)
|========================================

`octave_idx_type` is the index/one-dimensional size type for Octave arrays. A `dim_vector` is a  a list of ++octave_idx_type++s and represents the size of an array (that is, its size along each dimension).

---------------------------------------
include::src/ex05_sizes_and_indexing.cc[]
---------------------------------------

Breaking it down:

---------------------------------------
  dim_vector sz = x.dims ();
  NDArray y (sz);
---------------------------------------

You can get the size of an existing array with `dims()` (not `size()`). And you can construct a new array of a given size by passing a `dim_vector` to its constructor.

---------------------------------------
  typedef octave_idx_type oct_idx;
  [...]
  for (oct_idx i = 0; i < y.numel (); i++)
---------------------------------------

I don't like typing out “`octave_idx_type`”, so I typedef it to the shorter “`oct_idx`”. This isn't standard Octave; it's just something I made up.

Again, use `octave_idx_type` instead of `int` for indexing into Octave arrays.

An `octave_idx_type` is an int, and probably wider than a plain `int`.
So you can assign an `int` to an `octave_idx_type`, but you cannot safely assign an `octave_idx_type` to an `int`.
(If you're compiling in 64-bit mode, your compiler should give you a warning if you do so.)

---------------------------------------
  for (oct_idx i = 0; i < y.numel (); i++) {
    y(i) = x(i) + i;
  }
---------------------------------------

Once you create an `NDArray`, you can assign values to its elements using `()`-indexing, like you can in M-code.
But, in C/C++, arrays are https://en.wikipedia.org/wiki/Zero-based_numbering[zero-indexed] instead of 1-indexed like in M-code.
And you index into an `NDArray` C-style.
So `i` starts at 0 instead of 1 here, and the `i < y.numel ()` comparison is `<` instead of `<=` like it would be in M-code.

---------------------------------------
  octave_stdout << "Array z has " << sz2.ndims() << " dimensions and "
      << sz2.numel() << " elements." << std::endl;
---------------------------------------

It's more convenient to use C++ style stream output than C style `printf` here, because you don't have to worry about matching the size of the format placeholders to the size of `octave_idx_type`.

The weird thing about `dim_vector` is that its `ndims()` and `numel()` methods refer to the size of the array it is describing, not the `dim_vector` array itself.

---------------------------------------
  dim_vector sz2 (2, 3, 4, 5);
  NDArray z (sz2);
---------------------------------------

You can construct a new `dim_vector` by passing it a list of sizes along each dimension.

---------------------------------------
  NDArray z2 (dim_vector (2, 3, 4, 5));
---------------------------------------

And you don't have to store that `dim_vector` in an intermediate variable; you can pass a new one directly into the `NDArray` constructor.

=== Relational Operations ===

_TODO: Go over `==`, `<`, `>`, and so on. Probably sort() and unique(), too._

== Less Basic Stuff ==

=== Detecting Array Types ===

_TODO: Describe how to detect array types (e.g. differentiate numeric types, structs, user-defined class objects.)_

=== Calling M Functions ===

_TODO_

=== Calling Fortran Code ===

_TODO_

=== Documenting Oct-Files ===

_TODO_

== Junior Varsity Level ==

=== C++ Templates and Oct Functions ===

Let's go crazy. Here's binary search as an oct-file.

-----------------------------------
include::src/ex10_binsearch.cc[]
-----------------------------------

_TODO: Explain this._

== Building Oct-Files ==

=== Using `mkoctfile` ===

_TODO: How to use `mkoctfile` (both shell command and Octave function)_

=== Organizing Projects ===

_TODO: How to organize an Oct-file project/package_

=== Using IDEs with Oct-Files ===

_TODO_

==== Creating CLion Projects ====

_TODO_

_TODO: Find a free IDE to add here._

== Other Resources ==

https://octave.org/doc/v4.4.1/Oct_002dFiles.html[The GNU Octave 4.4.1 Manual Oct-Files section] – This is the official reference on oct-files.

https://octave.sourceforge.io/coda/index.html[Da Coda Al Fine - Pushing Octave's Limits] – An older 2004 document on advanced Octave programming.
Contains a section on oct-files.

http://wiki.octave.org/Tips_and_tricks#C.2B.2B[Tips and Tricks on the Octave Wiki] has some info on what C++ liboctave operations correspond to common M-code operations.

The `#octave` channel on https://freenode.net/[freenode IRC] is often populated with Octave hackers, including Octave's core developers.
You can ask oct-file questions there.

The Octave source code is the real low-level reference on the Octave internal API used by oct-files.
The relevant definitions are in the `*.h` header files in `liboctave/` and `libinterp/`.

https://stackoverflow.com[StackOverflow] is the web's premiere Q&A site for programmers.
Tag your question with the https://stackoverflow.com/questions/tagged/octave[“octave” tag].

== Open Questions ==

=== Constructing ++NDArray++s from doubles ===

`NDArray x (42.0)` succeeds but doesn't produce the results I expect. Figure this out.

=== Error String Construction and `octave_value` Types ===

Why can't I do this? It results in a compiler error saying `no viable conversion from 'octave_value' to 'std::string'`.

-----------------------------------
  octave_value x = args(0);

  builtin_type_t x_type = x.builtin_type ();
  std::string msg = std::string ("Type of arg 1 is: ") + x_type;
  error (msg);
-----------------------------------
